import React, { useEffect, useState } from 'react';
import { Cell, Input, Button, KeyBoard, Toast, hooks } from '@jojobo/jing-ui';
import { DemoBlock } from 'demo';

export default () => {

    const [state, updateState] = hooks.useSetState({
        text: '',
        tel: '',
        digit: '',
        num: '',
        password: '',
    })

    const [value, setValue] = useState('');
    const [value1, setValue1] = useState('');

    const [isActive, setIsActive] = useState(false);
    const [state1, setState1] = hooks.useSetState({
        visible: false,
        value: '',
    });


    return (
        <>
            <DemoBlock title="Âü∫Á°ÄÁî®Ê≥ï" padding="">
                <Cell>
                    <Input
                        value={state.text}
                        onChange={(text: any) => updateState({ text })}
                        placeholder='ËØ∑ËæìÂÖ•ÊñáÊú¨'
                    />
                </Cell>
                <Cell>
                    <Input
                        value={state.tel}
                        type='tel'
                        onChange={(tel: any) => updateState({ tel })}
                        placeholder='ËØ∑ËæìÂÖ•ÊâãÊú∫Âè∑'
                    />
                </Cell>
                <Cell>
                    <Input
                        value={state.digit}
                        type='digit'
                        onChange={(digit: any) => updateState({ digit })}
                        placeholder='ËØ∑ËæìÂÖ•Êï¥Êï∞'
                    />
                </Cell>
                <Cell>
                    <Input
                        value={state.num}
                        type='number'
                        onChange={(num: any) => updateState({ num })}
                        placeholder='ËØ∑ËæìÂÖ•Êï∞Â≠ó'
                    />
                </Cell>

                <Cell>
                    <Input
                        value={state.password}
                        type='password'
                        onChange={(password: any) => updateState({ password })}
                        placeholder='ËØ∑ËæìÂÖ•ÂØÜÁ†Å'
                    />
                </Cell>
            </DemoBlock>
            <DemoBlock title="Ê∏ÖÈô§ÊåâÈíÆ" padding="">
                <Cell>
                    <Input
                        placeholder="ËØ∑ËæìÂÖ•ÊñáÊú¨"
                        value={value}
                        onChange={setValue}
                        clearable
                        onClear={() => {
                            setValue('')
                        }}
                    />
                </Cell>
            </DemoBlock>
            <DemoBlock title="ÊèíÂÖ•ÂÜÖÂÆπ" padding="">
                <Cell>
                    <Input
                        prefix="üíÅ"
                        suffix={<Button size="small" type="primary">ÂèëÈÄÅ</Button>}
                        value={value1}
                        onChange={setValue1}
                        placeholder="ËØ∑ËæìÂÖ•Áü≠‰ø°È™åËØÅÁ†Å"
                    />
                </Cell>
            </DemoBlock>
            <DemoBlock title="ÁªìÂêàÈîÆÁõòÁöÑInput" padding="">
                <Cell>
                    <Input.KeyBoard
                    // value={state1.value}
                    // placeholder="ËØ∑ËæìÂÖ•ÁôªÂΩïÂØÜÁ†Å"
                    // active={isActive}
                    // onHandleFocus={() => {
                    //     setIsActive(true);
                    //     console.log('keyboardËÅöÁÑ¶Êó∂');
                    // }}
                    // onClearValue={() => {
                    //     setIsActive(false);
                    //     console.log('ÁÇπÂáªÊ∏ÖÈô§ÂõæÊ†áÊó∂');
                    // }}
                    // maxLength={20}
                    />
                </Cell>
                <KeyBoard
                    value={state1.value}
                    visible={state1.visible}
                    maxLength={10}
                    layoutName="default"
                    onBlur={() => {
                        setState1({ visible: false });
                    }}
                    onInput={(value: string) => {
                        setState1({ value });
                    }}
                    onSpaceCb={() => {
                        Toast('Á©∫Ê†º‰∏çÂèØÁî®');
                    }}
                    onDoneCb={() => {
                        Toast('ÁÇπÂáªÂÆåÊàê');
                    }}
                />
            </DemoBlock>
            {/* <DemoBlock title="Â∏¶ÂâçÁºÄÁöÑËæìÂÖ•Ê°Ü" padding="">
                <Input.Prefix
                    value={value}
                    placeholder="Â∏¶ÂâçÁºÄÁöÑËæìÂÖ•Ê°Ü"
                    icon={<IconUser />}
                />
            </DemoBlock>

            <DemoBlock title="KeyBoardËæìÂÖ•Ê°Ü" padding="">
                <Input.KeyBoard
                    value={value}
                    placeholder="ÂÖ∑‰ΩìÂèØÂéªÈîÆÁõòÁªÑ‰ª∂Êü•Áúãdemo"
                    active={isActive}
                    onHandleFocus={() => {
                        setIsActive(true);
                        console.log('keyboardËÅöÁÑ¶Êó∂');
                    }}
                    onClearValue={() => {
                        setIsActive(false);
                        console.log('ÁÇπÂáªÊ∏ÖÈô§ÂõæÊ†áÊó∂');
                    }}
                    maxLength={20}
                />
            </DemoBlock>
            <DemoBlock title="Â§öË°åÊñáÊú¨" padding="">
                <Input.Textarea
                    rows={3}
                    placeholder="ËØ∑ËæìÂÖ•"
                    value={text}
                    onChange={(value: any) => {
                        setText(value);
                        console.log(`onChange: ${value}`);
                    }}
                    onBlur={(value: any) => console.log(`onBlur: ${value}`)}
                />
            </DemoBlock> */}
        </>
    );
};
